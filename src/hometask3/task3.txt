1) Создать класс Human.
Поля:
● String name (имя)
● String lastName (фамилия)
● Gender gender (пол. Реализовать с помощью Enum)
 Методы:
● Стандартные (методы получения и установки, toString() и т.д.)
2) Создать класс Student как подкласс Human.
Поля:
● int id (номер зачетки)
● String groupName (название группы где он учится)
Методы:
● Стандартные (методы получения и установки, toString() и т.д.)
3) Создать классы GroupOverflowException, StudentNotFoundException (наследники Exception) в качестве пользовательских
исключений.
4) Создать класс Group
Поля:
● String groupName (название)
● Student[] studens = new Student[10]; (массив из 10 студентов)
 Методы:
● Стандартные (методы получения и установки, toString() и т.д.)
● public void addStudent(Student student) throws GroupOverflowException (метод добавления студента в группу. В случае
добавления 11 студента должно быть возбужденно пользовательское исключение)
● public Student searchStudentByLastName(String lastName) throws StudentNotFoundException (метод поиска студента в группе.
Если студент не найден должно быть возбужденно пользовательское исключение)
● public boolean removeStudentByID(int id) (метод удаления студента по номеру зачетки, вернуть true если такой студент был и он
был удален и false в противном случае)
5) Реализуйте метод для сортировки массива студентов по фамилии. Примените его в методе
toString() класса Group что бы получить список студентов в алфавитном порядке.

1) Дополните реализацию группы Студентов возможностью сортировки массива студентов по фамилии. Для этого в класс Группа добавьте метод sortStudentsByLastName(). Иметься ввивду тут нада сделать реализацию интерфейса компоратор под свои нужды.  а  потом просто готовой сортировкой массива воспользоваться.
2) Создайте отдельный класс который реализует считывание характеристик студента с клавиатуры (имя, фамилии и т. д.). Создание и возврат студента на основе считанных данных. Используете методы этого класса для считывания и добавления студента в группу.
3)Объявите интерфейс
public interface CSVConverter{
public String toCSVString();
public Student fromCSVString (String str);
}
Класс Студент должен реализовывать этот интерфейс. Логика реализации следующая — на основе Студента создать строку с его CSV представлением и наоборот на основе этой строки
создать Студента.

3. Усовершенствуйте класс описывающий группу студентов
добавив возможность сохранения списка студентов в файл.
4. Реализовать обратный процесс — т.е. считать данные о
студентах из файла.